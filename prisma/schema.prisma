generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             Int            @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String         @unique
  password       String         // HASHED
  profilePicture String?
  phoneNumber    String
  role           Role           @default(USER)

  hotels         Hotel[]
  hotelBookings  HotelBooking[] // One-to-many with HotelBooking
  flightBookings FlightBooking[] // One-to-many with FlightBooking
  notifications  Notification[]
  itineraries    Itinerary[]    // Added inverse relation for Itinerary.user
}

enum Role {
  USER
  HOTEL_OWNER
}

model Hotel {
  id          Int       @id @default(autoincrement())
  name        String
  logo        String?
  address     String
  location    String    // City, Country
  starRating  Int

  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     Int
  roomTypes   RoomType[]
  bookings    HotelBooking[]
  images      HotelImage[]
}

model HotelImage {
  id      Int    @id @default(autoincrement())
  url     String
  hotel   Hotel  @relation(fields: [hotelId], references: [id])
  hotelId Int
}

model RoomType {
  id            Int       @id @default(autoincrement())
  name          String    // "Twin", "Double", etc.
  totalRooms    Int       // No. Rooms (can't be num available since we would need a date range so is just num rooms of roomtype)
  pricePerNight Float

  amenities     RoomTypeAmenity[]
  hotel         Hotel           @relation(fields: [hotelId], references: [id])
  hotelId       Int
  images        RoomTypeImage[]
  hotelBookings HotelBooking[]  // Added inverse relation for HotelBooking.roomType
}

model RoomTypeImage {
  id         Int       @id @default(autoincrement())
  url        String
  roomType   RoomType  @relation(fields: [roomTypeId], references: [id])
  roomTypeId Int
}

model RoomTypeAmenity {
  id         Int       @id @default(autoincrement())
  name       String    // "Wi-Fi", "TV", etc.
  roomType   RoomType  @relation(fields: [roomTypeId], references: [id])
  roomTypeId Int
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Itinerary {
  id               Int           @id @default(autoincrement())
  user             User          @relation(fields: [userId], references: [id])
  userId           Int
  creditCardNumber String?       // **** + Last 4 Digits
  cardExpiry       String?       
  invoiceUrl       String?       // URL to PDF invoice
  status           BookingStatus @default(PENDING)

  hotelBooking     HotelBooking? @relation("HotelBookingToItinerary")
  flightBooking    FlightBooking? @relation("FlightBookingToItinerary")
}

model HotelBooking {
  id            Int           @id @default(autoincrement())
  hotel         Hotel         @relation(fields: [hotelId], references: [id])
  hotelId       Int
  roomType      RoomType      @relation(fields: [roomTypeId], references: [id])
  roomTypeId    Int
  checkInDate   DateTime
  checkOutDate  DateTime
  hotelPrice    Float
  status        BookingStatus @default(PENDING)

  itinerary     Itinerary?    @relation("HotelBookingToItinerary", fields: [itineraryId], references: [id])
  itineraryId   Int?          @unique
  user          User          @relation(fields: [userId], references: [id]) // Added inverse relation for User.hotelBookings
  userId        Int
  notifications Notification[] // Added inverse relation for Notification.hotelBooking
}

model FlightBooking {
  id                Int           @id @default(autoincrement())
  flightBookingRef  String        // AFS Reference
  flightTicketNumber String?      // AFS Ticket No.
  flightPrice       Float
  status            BookingStatus @default(PENDING)

  itinerary         Itinerary     @relation("FlightBookingToItinerary", fields: [itineraryId], references: [id])
  itineraryId       Int           @unique
  user              User          @relation(fields: [userId], references: [id]) // Added inverse relation for User.flightBookings
  userId            Int
  notifications     Notification[] // Added inverse relation for Notification.flightBooking
}

model Notification {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  message        String
  isRead         Boolean       @default(false)

  hotelBooking   HotelBooking? @relation(fields: [hotelBookingId], references: [id])
  hotelBookingId Int?
  flightBooking  FlightBooking? @relation(fields: [flightBookingId], references: [id])
  flightBookingId Int?
}


// Models to store cities and airports locally

model City {
  id        Int   @id @default(autoincrement())
  name      String
  country   String
  airports  Airport[]
}


model Airport {
  id        Int   @id @default(autoincrement())
  code      String
  name      String
  cityId    Int
  city      City     @relation(fields: [cityId], references: [id])
}